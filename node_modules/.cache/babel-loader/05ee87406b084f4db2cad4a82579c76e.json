{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_colorlike_ from '../colorlike.js';\nimport _ol_dom_ from '../dom.js';\nimport _ol_has_ from '../has.js';\nimport _ol_ImageState_ from '../imagestate.js';\nimport _ol_render_canvas_ from '../render/canvas.js';\nimport _ol_style_Image_ from '../style/image.js';\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n *\n * @constructor\n * @param {olx.style.RegularShapeOptions} options Options.\n * @extends {ol.style.Image}\n * @api\n */\n\nvar _ol_style_RegularShape_ = function (options) {\n  /**\n   * @private\n   * @type {Array.<string>}\n   */\n  this.checksums_ = null;\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n\n  this.canvas_ = null;\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n\n  this.hitDetectionCanvas_ = null;\n  /**\n   * @private\n   * @type {ol.style.Fill}\n   */\n\n  this.fill_ = options.fill !== undefined ? options.fill : null;\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.origin_ = [0, 0];\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.points_ = options.points;\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.radius_ =\n  /** @type {number} */\n  options.radius !== undefined ? options.radius : options.radius1;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.radius2_ = options.radius2;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.angle_ = options.angle !== undefined ? options.angle : 0;\n  /**\n   * @private\n   * @type {ol.style.Stroke}\n   */\n\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this.anchor_ = null;\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n\n  this.size_ = null;\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n\n  this.imageSize_ = null;\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n\n  this.hitDetectionImageSize_ = null;\n  /**\n   * @protected\n   * @type {ol.style.AtlasManager|undefined}\n   */\n\n  this.atlasManager_ = options.atlasManager;\n  this.render_(this.atlasManager_);\n  /**\n   * @type {boolean}\n   */\n\n  var snapToPixel = options.snapToPixel !== undefined ? options.snapToPixel : true;\n  /**\n   * @type {boolean}\n   */\n\n  var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n  _ol_style_Image_.call(this, {\n    opacity: 1,\n    rotateWithView: rotateWithView,\n    rotation: options.rotation !== undefined ? options.rotation : 0,\n    scale: 1,\n    snapToPixel: snapToPixel\n  });\n};\n\n_ol_.inherits(_ol_style_RegularShape_, _ol_style_Image_);\n/**\n * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n * @return {ol.style.RegularShape} The cloned style.\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.clone = function () {\n  var style = new _ol_style_RegularShape_({\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    points: this.getPoints(),\n    radius: this.getRadius(),\n    radius2: this.getRadius2(),\n    angle: this.getAngle(),\n    snapToPixel: this.getSnapToPixel(),\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    rotation: this.getRotation(),\n    rotateWithView: this.getRotateWithView(),\n    atlasManager: this.atlasManager_\n  });\n  style.setOpacity(this.getOpacity());\n  style.setScale(this.getScale());\n  return style;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getAnchor = function () {\n  return this.anchor_;\n};\n/**\n * Get the angle used in generating the shape.\n * @return {number} Shape's rotation in radians.\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getAngle = function () {\n  return this.angle_;\n};\n/**\n * Get the fill style for the shape.\n * @return {ol.style.Fill} Fill style.\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getFill = function () {\n  return this.fill_;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_style_RegularShape_.prototype.getHitDetectionImage = function (pixelRatio) {\n  return this.hitDetectionCanvas_;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getImage = function (pixelRatio) {\n  return this.canvas_;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_style_RegularShape_.prototype.getImageSize = function () {\n  return this.imageSize_;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_style_RegularShape_.prototype.getHitDetectionImageSize = function () {\n  return this.hitDetectionImageSize_;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_style_RegularShape_.prototype.getImageState = function () {\n  return _ol_ImageState_.LOADED;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getOrigin = function () {\n  return this.origin_;\n};\n/**\n * Get the number of points for generating the shape.\n * @return {number} Number of points for stars and regular polygons.\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getPoints = function () {\n  return this.points_;\n};\n/**\n * Get the (primary) radius for the shape.\n * @return {number} Radius.\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getRadius = function () {\n  return this.radius_;\n};\n/**\n * Get the secondary radius for the shape.\n * @return {number|undefined} Radius2.\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getRadius2 = function () {\n  return this.radius2_;\n};\n/**\n * @inheritDoc\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getSize = function () {\n  return this.size_;\n};\n/**\n * Get the stroke style for the shape.\n * @return {ol.style.Stroke} Stroke style.\n * @api\n */\n\n\n_ol_style_RegularShape_.prototype.getStroke = function () {\n  return this.stroke_;\n};\n/**\n * @inheritDoc\n */\n\n\n_ol_style_RegularShape_.prototype.listenImageChange = function (listener, thisArg) {};\n/**\n * @inheritDoc\n */\n\n\n_ol_style_RegularShape_.prototype.load = function () {};\n/**\n * @inheritDoc\n */\n\n\n_ol_style_RegularShape_.prototype.unlistenImageChange = function (listener, thisArg) {};\n/**\n * @protected\n * @param {ol.style.AtlasManager|undefined} atlasManager An atlas manager.\n */\n\n\n_ol_style_RegularShape_.prototype.render_ = function (atlasManager) {\n  var imageSize;\n  var lineCap = '';\n  var lineJoin = '';\n  var miterLimit = 0;\n  var lineDash = null;\n  var lineDashOffset = 0;\n  var strokeStyle;\n  var strokeWidth = 0;\n\n  if (this.stroke_) {\n    strokeStyle = this.stroke_.getColor();\n\n    if (strokeStyle === null) {\n      strokeStyle = _ol_render_canvas_.defaultStrokeStyle;\n    }\n\n    strokeStyle = _ol_colorlike_.asColorLike(strokeStyle);\n    strokeWidth = this.stroke_.getWidth();\n\n    if (strokeWidth === undefined) {\n      strokeWidth = _ol_render_canvas_.defaultLineWidth;\n    }\n\n    lineDash = this.stroke_.getLineDash();\n    lineDashOffset = this.stroke_.getLineDashOffset();\n\n    if (!_ol_has_.CANVAS_LINE_DASH) {\n      lineDash = null;\n      lineDashOffset = 0;\n    }\n\n    lineJoin = this.stroke_.getLineJoin();\n\n    if (lineJoin === undefined) {\n      lineJoin = _ol_render_canvas_.defaultLineJoin;\n    }\n\n    lineCap = this.stroke_.getLineCap();\n\n    if (lineCap === undefined) {\n      lineCap = _ol_render_canvas_.defaultLineCap;\n    }\n\n    miterLimit = this.stroke_.getMiterLimit();\n\n    if (miterLimit === undefined) {\n      miterLimit = _ol_render_canvas_.defaultMiterLimit;\n    }\n  }\n\n  var size = 2 * (this.radius_ + strokeWidth) + 1;\n  /** @type {ol.RegularShapeRenderOptions} */\n\n  var renderOptions = {\n    strokeStyle: strokeStyle,\n    strokeWidth: strokeWidth,\n    size: size,\n    lineCap: lineCap,\n    lineDash: lineDash,\n    lineDashOffset: lineDashOffset,\n    lineJoin: lineJoin,\n    miterLimit: miterLimit\n  };\n\n  if (atlasManager === undefined) {\n    // no atlas manager is used, create a new canvas\n    var context = _ol_dom_.createCanvasContext2D(size, size);\n\n    this.canvas_ = context.canvas; // canvas.width and height are rounded to the closest integer\n\n    size = this.canvas_.width;\n    imageSize = size;\n    this.draw_(renderOptions, context, 0, 0);\n    this.createHitDetectionCanvas_(renderOptions);\n  } else {\n    // an atlas manager is used, add the symbol to an atlas\n    size = Math.round(size);\n    var hasCustomHitDetectionImage = !this.fill_;\n    var renderHitDetectionCallback;\n\n    if (hasCustomHitDetectionImage) {\n      // render the hit-detection image into a separate atlas image\n      renderHitDetectionCallback = this.drawHitDetectionCanvas_.bind(this, renderOptions);\n    }\n\n    var id = this.getChecksum();\n    var info = atlasManager.add(id, size, size, this.draw_.bind(this, renderOptions), renderHitDetectionCallback);\n    this.canvas_ = info.image;\n    this.origin_ = [info.offsetX, info.offsetY];\n    imageSize = info.image.width;\n\n    if (hasCustomHitDetectionImage) {\n      this.hitDetectionCanvas_ = info.hitImage;\n      this.hitDetectionImageSize_ = [info.hitImage.width, info.hitImage.height];\n    } else {\n      this.hitDetectionCanvas_ = this.canvas_;\n      this.hitDetectionImageSize_ = [imageSize, imageSize];\n    }\n  }\n\n  this.anchor_ = [size / 2, size / 2];\n  this.size_ = [size, size];\n  this.imageSize_ = [imageSize, imageSize];\n};\n/**\n * @private\n * @param {ol.RegularShapeRenderOptions} renderOptions Render options.\n * @param {CanvasRenderingContext2D} context The rendering context.\n * @param {number} x The origin for the symbol (x).\n * @param {number} y The origin for the symbol (y).\n */\n\n\n_ol_style_RegularShape_.prototype.draw_ = function (renderOptions, context, x, y) {\n  var i, angle0, radiusC; // reset transform\n\n  context.setTransform(1, 0, 0, 1, 0, 0); // then move to (x, y)\n\n  context.translate(x, y);\n  context.beginPath();\n  var points = this.points_;\n\n  if (points === Infinity) {\n    context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);\n  } else {\n    var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n\n    if (radius2 !== this.radius_) {\n      points = 2 * points;\n    }\n\n    for (i = 0; i <= points; i++) {\n      angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n      radiusC = i % 2 === 0 ? this.radius_ : radius2;\n      context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));\n    }\n  }\n\n  if (this.fill_) {\n    var color = this.fill_.getColor();\n\n    if (color === null) {\n      color = _ol_render_canvas_.defaultFillStyle;\n    }\n\n    context.fillStyle = _ol_colorlike_.asColorLike(color);\n    context.fill();\n  }\n\n  if (this.stroke_) {\n    context.strokeStyle = renderOptions.strokeStyle;\n    context.lineWidth = renderOptions.strokeWidth;\n\n    if (renderOptions.lineDash) {\n      context.setLineDash(renderOptions.lineDash);\n      context.lineDashOffset = renderOptions.lineDashOffset;\n    }\n\n    context.lineCap = renderOptions.lineCap;\n    context.lineJoin = renderOptions.lineJoin;\n    context.miterLimit = renderOptions.miterLimit;\n    context.stroke();\n  }\n\n  context.closePath();\n};\n/**\n * @private\n * @param {ol.RegularShapeRenderOptions} renderOptions Render options.\n */\n\n\n_ol_style_RegularShape_.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n  this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];\n\n  if (this.fill_) {\n    this.hitDetectionCanvas_ = this.canvas_;\n    return;\n  } // if no fill style is set, create an extra hit-detection image with a\n  // default fill style\n\n\n  var context = _ol_dom_.createCanvasContext2D(renderOptions.size, renderOptions.size);\n\n  this.hitDetectionCanvas_ = context.canvas;\n  this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);\n};\n/**\n * @private\n * @param {ol.RegularShapeRenderOptions} renderOptions Render options.\n * @param {CanvasRenderingContext2D} context The context.\n * @param {number} x The origin for the symbol (x).\n * @param {number} y The origin for the symbol (y).\n */\n\n\n_ol_style_RegularShape_.prototype.drawHitDetectionCanvas_ = function (renderOptions, context, x, y) {\n  // reset transform\n  context.setTransform(1, 0, 0, 1, 0, 0); // then move to (x, y)\n\n  context.translate(x, y);\n  context.beginPath();\n  var points = this.points_;\n\n  if (points === Infinity) {\n    context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);\n  } else {\n    var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n\n    if (radius2 !== this.radius_) {\n      points = 2 * points;\n    }\n\n    var i, radiusC, angle0;\n\n    for (i = 0; i <= points; i++) {\n      angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n      radiusC = i % 2 === 0 ? this.radius_ : radius2;\n      context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));\n    }\n  }\n\n  context.fillStyle = _ol_render_canvas_.defaultFillStyle;\n  context.fill();\n\n  if (this.stroke_) {\n    context.strokeStyle = renderOptions.strokeStyle;\n    context.lineWidth = renderOptions.strokeWidth;\n\n    if (renderOptions.lineDash) {\n      context.setLineDash(renderOptions.lineDash);\n      context.lineDashOffset = renderOptions.lineDashOffset;\n    }\n\n    context.stroke();\n  }\n\n  context.closePath();\n};\n/**\n * @return {string} The checksum.\n */\n\n\n_ol_style_RegularShape_.prototype.getChecksum = function () {\n  var strokeChecksum = this.stroke_ ? this.stroke_.getChecksum() : '-';\n  var fillChecksum = this.fill_ ? this.fill_.getChecksum() : '-';\n  var recalculate = !this.checksums_ || strokeChecksum != this.checksums_[1] || fillChecksum != this.checksums_[2] || this.radius_ != this.checksums_[3] || this.radius2_ != this.checksums_[4] || this.angle_ != this.checksums_[5] || this.points_ != this.checksums_[6];\n\n  if (recalculate) {\n    var checksum = 'r' + strokeChecksum + fillChecksum + (this.radius_ !== undefined ? this.radius_.toString() : '-') + (this.radius2_ !== undefined ? this.radius2_.toString() : '-') + (this.angle_ !== undefined ? this.angle_.toString() : '-') + (this.points_ !== undefined ? this.points_.toString() : '-');\n    this.checksums_ = [checksum, strokeChecksum, fillChecksum, this.radius_, this.radius2_, this.angle_, this.points_];\n  }\n\n  return this.checksums_[0];\n};\n\nexport default _ol_style_RegularShape_;","map":{"version":3,"sources":["/Users/jo/Dev/public/hackzurich-2020-map/map/node_modules/ol/style/regularshape.js"],"names":["_ol_","_ol_colorlike_","_ol_dom_","_ol_has_","_ol_ImageState_","_ol_render_canvas_","_ol_style_Image_","_ol_style_RegularShape_","options","checksums_","canvas_","hitDetectionCanvas_","fill_","fill","undefined","origin_","points_","points","radius_","radius","radius1","radius2_","radius2","angle_","angle","stroke_","stroke","anchor_","size_","imageSize_","hitDetectionImageSize_","atlasManager_","atlasManager","render_","snapToPixel","rotateWithView","call","opacity","rotation","scale","inherits","prototype","clone","style","getFill","getPoints","getRadius","getRadius2","getAngle","getSnapToPixel","getStroke","getRotation","getRotateWithView","setOpacity","getOpacity","setScale","getScale","getAnchor","getHitDetectionImage","pixelRatio","getImage","getImageSize","getHitDetectionImageSize","getImageState","LOADED","getOrigin","getSize","listenImageChange","listener","thisArg","load","unlistenImageChange","imageSize","lineCap","lineJoin","miterLimit","lineDash","lineDashOffset","strokeStyle","strokeWidth","getColor","defaultStrokeStyle","asColorLike","getWidth","defaultLineWidth","getLineDash","getLineDashOffset","CANVAS_LINE_DASH","getLineJoin","defaultLineJoin","getLineCap","defaultLineCap","getMiterLimit","defaultMiterLimit","size","renderOptions","context","createCanvasContext2D","canvas","width","draw_","createHitDetectionCanvas_","Math","round","hasCustomHitDetectionImage","renderHitDetectionCallback","drawHitDetectionCanvas_","bind","id","getChecksum","info","add","image","offsetX","offsetY","hitImage","height","x","y","i","angle0","radiusC","setTransform","translate","beginPath","Infinity","arc","PI","lineTo","cos","sin","color","defaultFillStyle","fillStyle","lineWidth","setLineDash","closePath","strokeChecksum","fillChecksum","recalculate","checksum","toString"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_colorlike_ from '../colorlike.js';\nimport _ol_dom_ from '../dom.js';\nimport _ol_has_ from '../has.js';\nimport _ol_ImageState_ from '../imagestate.js';\nimport _ol_render_canvas_ from '../render/canvas.js';\nimport _ol_style_Image_ from '../style/image.js';\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n *\n * @constructor\n * @param {olx.style.RegularShapeOptions} options Options.\n * @extends {ol.style.Image}\n * @api\n */\nvar _ol_style_RegularShape_ = function(options) {\n  /**\n   * @private\n   * @type {Array.<string>}\n   */\n  this.checksums_ = null;\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n  this.canvas_ = null;\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement}\n   */\n  this.hitDetectionCanvas_ = null;\n\n  /**\n   * @private\n   * @type {ol.style.Fill}\n   */\n  this.fill_ = options.fill !== undefined ? options.fill : null;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.origin_ = [0, 0];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.points_ = options.points;\n\n  /**\n   * @protected\n   * @type {number}\n   */\n  this.radius_ = /** @type {number} */ (options.radius !== undefined ?\n    options.radius : options.radius1);\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.radius2_ = options.radius2;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n  /**\n   * @private\n   * @type {ol.style.Stroke}\n   */\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.anchor_ = null;\n\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n  this.size_ = null;\n\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n  this.imageSize_ = null;\n\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n  this.hitDetectionImageSize_ = null;\n\n  /**\n   * @protected\n   * @type {ol.style.AtlasManager|undefined}\n   */\n  this.atlasManager_ = options.atlasManager;\n\n  this.render_(this.atlasManager_);\n\n  /**\n   * @type {boolean}\n   */\n  var snapToPixel = options.snapToPixel !== undefined ?\n    options.snapToPixel : true;\n\n  /**\n   * @type {boolean}\n   */\n  var rotateWithView = options.rotateWithView !== undefined ?\n    options.rotateWithView : false;\n\n  _ol_style_Image_.call(this, {\n    opacity: 1,\n    rotateWithView: rotateWithView,\n    rotation: options.rotation !== undefined ? options.rotation : 0,\n    scale: 1,\n    snapToPixel: snapToPixel\n  });\n};\n\n_ol_.inherits(_ol_style_RegularShape_, _ol_style_Image_);\n\n\n/**\n * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n * @return {ol.style.RegularShape} The cloned style.\n * @api\n */\n_ol_style_RegularShape_.prototype.clone = function() {\n  var style = new _ol_style_RegularShape_({\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    points: this.getPoints(),\n    radius: this.getRadius(),\n    radius2: this.getRadius2(),\n    angle: this.getAngle(),\n    snapToPixel: this.getSnapToPixel(),\n    stroke: this.getStroke() ?  this.getStroke().clone() : undefined,\n    rotation: this.getRotation(),\n    rotateWithView: this.getRotateWithView(),\n    atlasManager: this.atlasManager_\n  });\n  style.setOpacity(this.getOpacity());\n  style.setScale(this.getScale());\n  return style;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_style_RegularShape_.prototype.getAnchor = function() {\n  return this.anchor_;\n};\n\n\n/**\n * Get the angle used in generating the shape.\n * @return {number} Shape's rotation in radians.\n * @api\n */\n_ol_style_RegularShape_.prototype.getAngle = function() {\n  return this.angle_;\n};\n\n\n/**\n * Get the fill style for the shape.\n * @return {ol.style.Fill} Fill style.\n * @api\n */\n_ol_style_RegularShape_.prototype.getFill = function() {\n  return this.fill_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_style_RegularShape_.prototype.getHitDetectionImage = function(pixelRatio) {\n  return this.hitDetectionCanvas_;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_style_RegularShape_.prototype.getImage = function(pixelRatio) {\n  return this.canvas_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_style_RegularShape_.prototype.getImageSize = function() {\n  return this.imageSize_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_style_RegularShape_.prototype.getHitDetectionImageSize = function() {\n  return this.hitDetectionImageSize_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_style_RegularShape_.prototype.getImageState = function() {\n  return _ol_ImageState_.LOADED;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_style_RegularShape_.prototype.getOrigin = function() {\n  return this.origin_;\n};\n\n\n/**\n * Get the number of points for generating the shape.\n * @return {number} Number of points for stars and regular polygons.\n * @api\n */\n_ol_style_RegularShape_.prototype.getPoints = function() {\n  return this.points_;\n};\n\n\n/**\n * Get the (primary) radius for the shape.\n * @return {number} Radius.\n * @api\n */\n_ol_style_RegularShape_.prototype.getRadius = function() {\n  return this.radius_;\n};\n\n\n/**\n * Get the secondary radius for the shape.\n * @return {number|undefined} Radius2.\n * @api\n */\n_ol_style_RegularShape_.prototype.getRadius2 = function() {\n  return this.radius2_;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_style_RegularShape_.prototype.getSize = function() {\n  return this.size_;\n};\n\n\n/**\n * Get the stroke style for the shape.\n * @return {ol.style.Stroke} Stroke style.\n * @api\n */\n_ol_style_RegularShape_.prototype.getStroke = function() {\n  return this.stroke_;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_style_RegularShape_.prototype.listenImageChange = function(listener, thisArg) {};\n\n\n/**\n * @inheritDoc\n */\n_ol_style_RegularShape_.prototype.load = function() {};\n\n\n/**\n * @inheritDoc\n */\n_ol_style_RegularShape_.prototype.unlistenImageChange = function(listener, thisArg) {};\n\n\n/**\n * @protected\n * @param {ol.style.AtlasManager|undefined} atlasManager An atlas manager.\n */\n_ol_style_RegularShape_.prototype.render_ = function(atlasManager) {\n  var imageSize;\n  var lineCap = '';\n  var lineJoin = '';\n  var miterLimit = 0;\n  var lineDash = null;\n  var lineDashOffset = 0;\n  var strokeStyle;\n  var strokeWidth = 0;\n\n  if (this.stroke_) {\n    strokeStyle = this.stroke_.getColor();\n    if (strokeStyle === null) {\n      strokeStyle = _ol_render_canvas_.defaultStrokeStyle;\n    }\n    strokeStyle = _ol_colorlike_.asColorLike(strokeStyle);\n    strokeWidth = this.stroke_.getWidth();\n    if (strokeWidth === undefined) {\n      strokeWidth = _ol_render_canvas_.defaultLineWidth;\n    }\n    lineDash = this.stroke_.getLineDash();\n    lineDashOffset = this.stroke_.getLineDashOffset();\n    if (!_ol_has_.CANVAS_LINE_DASH) {\n      lineDash = null;\n      lineDashOffset = 0;\n    }\n    lineJoin = this.stroke_.getLineJoin();\n    if (lineJoin === undefined) {\n      lineJoin = _ol_render_canvas_.defaultLineJoin;\n    }\n    lineCap = this.stroke_.getLineCap();\n    if (lineCap === undefined) {\n      lineCap = _ol_render_canvas_.defaultLineCap;\n    }\n    miterLimit = this.stroke_.getMiterLimit();\n    if (miterLimit === undefined) {\n      miterLimit = _ol_render_canvas_.defaultMiterLimit;\n    }\n  }\n\n  var size = 2 * (this.radius_ + strokeWidth) + 1;\n\n  /** @type {ol.RegularShapeRenderOptions} */\n  var renderOptions = {\n    strokeStyle: strokeStyle,\n    strokeWidth: strokeWidth,\n    size: size,\n    lineCap: lineCap,\n    lineDash: lineDash,\n    lineDashOffset: lineDashOffset,\n    lineJoin: lineJoin,\n    miterLimit: miterLimit\n  };\n\n  if (atlasManager === undefined) {\n    // no atlas manager is used, create a new canvas\n    var context = _ol_dom_.createCanvasContext2D(size, size);\n    this.canvas_ = context.canvas;\n\n    // canvas.width and height are rounded to the closest integer\n    size = this.canvas_.width;\n    imageSize = size;\n\n    this.draw_(renderOptions, context, 0, 0);\n\n    this.createHitDetectionCanvas_(renderOptions);\n  } else {\n    // an atlas manager is used, add the symbol to an atlas\n    size = Math.round(size);\n\n    var hasCustomHitDetectionImage = !this.fill_;\n    var renderHitDetectionCallback;\n    if (hasCustomHitDetectionImage) {\n      // render the hit-detection image into a separate atlas image\n      renderHitDetectionCallback =\n          this.drawHitDetectionCanvas_.bind(this, renderOptions);\n    }\n\n    var id = this.getChecksum();\n    var info = atlasManager.add(\n        id, size, size, this.draw_.bind(this, renderOptions),\n        renderHitDetectionCallback);\n\n    this.canvas_ = info.image;\n    this.origin_ = [info.offsetX, info.offsetY];\n    imageSize = info.image.width;\n\n    if (hasCustomHitDetectionImage) {\n      this.hitDetectionCanvas_ = info.hitImage;\n      this.hitDetectionImageSize_ =\n          [info.hitImage.width, info.hitImage.height];\n    } else {\n      this.hitDetectionCanvas_ = this.canvas_;\n      this.hitDetectionImageSize_ = [imageSize, imageSize];\n    }\n  }\n\n  this.anchor_ = [size / 2, size / 2];\n  this.size_ = [size, size];\n  this.imageSize_ = [imageSize, imageSize];\n};\n\n\n/**\n * @private\n * @param {ol.RegularShapeRenderOptions} renderOptions Render options.\n * @param {CanvasRenderingContext2D} context The rendering context.\n * @param {number} x The origin for the symbol (x).\n * @param {number} y The origin for the symbol (y).\n */\n_ol_style_RegularShape_.prototype.draw_ = function(renderOptions, context, x, y) {\n  var i, angle0, radiusC;\n  // reset transform\n  context.setTransform(1, 0, 0, 1, 0, 0);\n\n  // then move to (x, y)\n  context.translate(x, y);\n\n  context.beginPath();\n\n  var points = this.points_;\n  if (points === Infinity) {\n    context.arc(\n        renderOptions.size / 2, renderOptions.size / 2,\n        this.radius_, 0, 2 * Math.PI, true);\n  } else {\n    var radius2 = (this.radius2_ !== undefined) ? this.radius2_\n      : this.radius_;\n    if (radius2 !== this.radius_) {\n      points = 2 * points;\n    }\n    for (i = 0; i <= points; i++) {\n      angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n      radiusC = i % 2 === 0 ? this.radius_ : radius2;\n      context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0));\n    }\n  }\n\n\n  if (this.fill_) {\n    var color = this.fill_.getColor();\n    if (color === null) {\n      color = _ol_render_canvas_.defaultFillStyle;\n    }\n    context.fillStyle = _ol_colorlike_.asColorLike(color);\n    context.fill();\n  }\n  if (this.stroke_) {\n    context.strokeStyle = renderOptions.strokeStyle;\n    context.lineWidth = renderOptions.strokeWidth;\n    if (renderOptions.lineDash) {\n      context.setLineDash(renderOptions.lineDash);\n      context.lineDashOffset = renderOptions.lineDashOffset;\n    }\n    context.lineCap = renderOptions.lineCap;\n    context.lineJoin = renderOptions.lineJoin;\n    context.miterLimit = renderOptions.miterLimit;\n    context.stroke();\n  }\n  context.closePath();\n};\n\n\n/**\n * @private\n * @param {ol.RegularShapeRenderOptions} renderOptions Render options.\n */\n_ol_style_RegularShape_.prototype.createHitDetectionCanvas_ = function(renderOptions) {\n  this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];\n  if (this.fill_) {\n    this.hitDetectionCanvas_ = this.canvas_;\n    return;\n  }\n\n  // if no fill style is set, create an extra hit-detection image with a\n  // default fill style\n  var context = _ol_dom_.createCanvasContext2D(renderOptions.size, renderOptions.size);\n  this.hitDetectionCanvas_ = context.canvas;\n\n  this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);\n};\n\n\n/**\n * @private\n * @param {ol.RegularShapeRenderOptions} renderOptions Render options.\n * @param {CanvasRenderingContext2D} context The context.\n * @param {number} x The origin for the symbol (x).\n * @param {number} y The origin for the symbol (y).\n */\n_ol_style_RegularShape_.prototype.drawHitDetectionCanvas_ = function(renderOptions, context, x, y) {\n  // reset transform\n  context.setTransform(1, 0, 0, 1, 0, 0);\n\n  // then move to (x, y)\n  context.translate(x, y);\n\n  context.beginPath();\n\n  var points = this.points_;\n  if (points === Infinity) {\n    context.arc(\n        renderOptions.size / 2, renderOptions.size / 2,\n        this.radius_, 0, 2 * Math.PI, true);\n  } else {\n    var radius2 = (this.radius2_ !== undefined) ? this.radius2_\n      : this.radius_;\n    if (radius2 !== this.radius_) {\n      points = 2 * points;\n    }\n    var i, radiusC, angle0;\n    for (i = 0; i <= points; i++) {\n      angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n      radiusC = i % 2 === 0 ? this.radius_ : radius2;\n      context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0));\n    }\n  }\n\n  context.fillStyle = _ol_render_canvas_.defaultFillStyle;\n  context.fill();\n  if (this.stroke_) {\n    context.strokeStyle = renderOptions.strokeStyle;\n    context.lineWidth = renderOptions.strokeWidth;\n    if (renderOptions.lineDash) {\n      context.setLineDash(renderOptions.lineDash);\n      context.lineDashOffset = renderOptions.lineDashOffset;\n    }\n    context.stroke();\n  }\n  context.closePath();\n};\n\n\n/**\n * @return {string} The checksum.\n */\n_ol_style_RegularShape_.prototype.getChecksum = function() {\n  var strokeChecksum = this.stroke_ ?\n    this.stroke_.getChecksum() : '-';\n  var fillChecksum = this.fill_ ?\n    this.fill_.getChecksum() : '-';\n\n  var recalculate = !this.checksums_ ||\n      (strokeChecksum != this.checksums_[1] ||\n      fillChecksum != this.checksums_[2] ||\n      this.radius_ != this.checksums_[3] ||\n      this.radius2_ != this.checksums_[4] ||\n      this.angle_ != this.checksums_[5] ||\n      this.points_ != this.checksums_[6]);\n\n  if (recalculate) {\n    var checksum = 'r' + strokeChecksum + fillChecksum +\n        (this.radius_ !== undefined ? this.radius_.toString() : '-') +\n        (this.radius2_ !== undefined ? this.radius2_.toString() : '-') +\n        (this.angle_ !== undefined ? this.angle_.toString() : '-') +\n        (this.points_ !== undefined ? this.points_.toString() : '-');\n    this.checksums_ = [checksum, strokeChecksum, fillChecksum,\n      this.radius_, this.radius2_, this.angle_, this.points_];\n  }\n\n  return this.checksums_[0];\n};\nexport default _ol_style_RegularShape_;\n"]},"metadata":{},"sourceType":"module"}