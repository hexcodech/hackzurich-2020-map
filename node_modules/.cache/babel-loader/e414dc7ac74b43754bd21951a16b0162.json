{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_LayerType_ from '../layertype.js';\nimport _ol_layer_Layer_ from '../layer/layer.js';\nimport _ol_layer_VectorRenderType_ from '../layer/vectorrendertype.js';\nimport _ol_obj_ from '../obj.js';\nimport _ol_style_Style_ from '../style/style.js';\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link ol.Object}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @constructor\n * @extends {ol.layer.Layer}\n * @fires ol.render.Event\n * @param {olx.layer.VectorOptions=} opt_options Options.\n * @api\n */\n\nvar _ol_layer_Vector_ = function (opt_options) {\n  var options = opt_options ? opt_options :\n  /** @type {olx.layer.VectorOptions} */\n  {};\n\n  var baseOptions = _ol_obj_.assign({}, options);\n\n  delete baseOptions.style;\n  delete baseOptions.renderBuffer;\n  delete baseOptions.updateWhileAnimating;\n  delete baseOptions.updateWhileInteracting;\n\n  _ol_layer_Layer_.call(this,\n  /** @type {olx.layer.LayerOptions} */\n  baseOptions);\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n\n  this.declutter_ = options.declutter !== undefined ? options.declutter : false;\n  /**\n   * @type {number}\n   * @private\n   */\n\n  this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;\n  /**\n   * User provided style.\n   * @type {ol.style.Style|Array.<ol.style.Style>|ol.StyleFunction}\n   * @private\n   */\n\n  this.style_ = null;\n  /**\n   * Style function for use within the library.\n   * @type {ol.StyleFunction|undefined}\n   * @private\n   */\n\n  this.styleFunction_ = undefined;\n  this.setStyle(options.style);\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;\n  /**\n   * @private\n   * @type {ol.layer.VectorTileRenderType|string}\n   */\n\n  this.renderMode_ = options.renderMode || _ol_layer_VectorRenderType_.VECTOR;\n  /**\n   * The layer type.\n   * @protected\n   * @type {ol.LayerType}\n   */\n\n  this.type = _ol_LayerType_.VECTOR;\n};\n\n_ol_.inherits(_ol_layer_Vector_, _ol_layer_Layer_);\n/**\n * @return {boolean} Declutter.\n */\n\n\n_ol_layer_Vector_.prototype.getDeclutter = function () {\n  return this.declutter_;\n};\n/**\n * @param {boolean} declutter Declutter.\n */\n\n\n_ol_layer_Vector_.prototype.setDeclutter = function (declutter) {\n  this.declutter_ = declutter;\n};\n/**\n * @return {number|undefined} Render buffer.\n */\n\n\n_ol_layer_Vector_.prototype.getRenderBuffer = function () {\n  return this.renderBuffer_;\n};\n/**\n * @return {function(ol.Feature, ol.Feature): number|null|undefined} Render\n *     order.\n */\n\n\n_ol_layer_Vector_.prototype.getRenderOrder = function () {\n  return (\n    /** @type {ol.RenderOrderFunction|null|undefined} */\n    this.get(_ol_layer_Vector_.Property_.RENDER_ORDER)\n  );\n};\n/**\n * Return the associated {@link ol.source.Vector vectorsource} of the layer.\n * @function\n * @return {ol.source.Vector} Source.\n * @api\n */\n\n\n_ol_layer_Vector_.prototype.getSource;\n/**\n * Get the style for features.  This returns whatever was passed to the `style`\n * option at construction or to the `setStyle` method.\n * @return {ol.style.Style|Array.<ol.style.Style>|ol.StyleFunction}\n *     Layer style.\n * @api\n */\n\n_ol_layer_Vector_.prototype.getStyle = function () {\n  return this.style_;\n};\n/**\n * Get the style function.\n * @return {ol.StyleFunction|undefined} Layer style function.\n * @api\n */\n\n\n_ol_layer_Vector_.prototype.getStyleFunction = function () {\n  return this.styleFunction_;\n};\n/**\n * @return {boolean} Whether the rendered layer should be updated while\n *     animating.\n */\n\n\n_ol_layer_Vector_.prototype.getUpdateWhileAnimating = function () {\n  return this.updateWhileAnimating_;\n};\n/**\n * @return {boolean} Whether the rendered layer should be updated while\n *     interacting.\n */\n\n\n_ol_layer_Vector_.prototype.getUpdateWhileInteracting = function () {\n  return this.updateWhileInteracting_;\n};\n/**\n * @param {ol.RenderOrderFunction|null|undefined} renderOrder\n *     Render order.\n */\n\n\n_ol_layer_Vector_.prototype.setRenderOrder = function (renderOrder) {\n  this.set(_ol_layer_Vector_.Property_.RENDER_ORDER, renderOrder);\n};\n/**\n * Set the style for features.  This can be a single style object, an array\n * of styles, or a function that takes a feature and resolution and returns\n * an array of styles. If it is `undefined` the default style is used. If\n * it is `null` the layer has no style (a `null` style), so only features\n * that have their own styles will be rendered in the layer. See\n * {@link ol.style} for information on the default style.\n * @param {ol.style.Style|Array.<ol.style.Style>|ol.StyleFunction|null|undefined}\n *     style Layer style.\n * @api\n */\n\n\n_ol_layer_Vector_.prototype.setStyle = function (style) {\n  this.style_ = style !== undefined ? style : _ol_style_Style_.defaultFunction;\n  this.styleFunction_ = style === null ? undefined : _ol_style_Style_.createFunction(this.style_);\n  this.changed();\n};\n/**\n * @return {ol.layer.VectorRenderType|string} The render mode.\n */\n\n\n_ol_layer_Vector_.prototype.getRenderMode = function () {\n  return this.renderMode_;\n};\n/**\n * @enum {string}\n * @private\n */\n\n\n_ol_layer_Vector_.Property_ = {\n  RENDER_ORDER: 'renderOrder'\n};\nexport default _ol_layer_Vector_;","map":{"version":3,"sources":["/Users/jo/Dev/public/hackzurich-2020-map/map/node_modules/ol/layer/vector.js"],"names":["_ol_","_ol_LayerType_","_ol_layer_Layer_","_ol_layer_VectorRenderType_","_ol_obj_","_ol_style_Style_","_ol_layer_Vector_","opt_options","options","baseOptions","assign","style","renderBuffer","updateWhileAnimating","updateWhileInteracting","call","declutter_","declutter","undefined","renderBuffer_","style_","styleFunction_","setStyle","updateWhileAnimating_","updateWhileInteracting_","renderMode_","renderMode","VECTOR","type","inherits","prototype","getDeclutter","setDeclutter","getRenderBuffer","getRenderOrder","get","Property_","RENDER_ORDER","getSource","getStyle","getStyleFunction","getUpdateWhileAnimating","getUpdateWhileInteracting","setRenderOrder","renderOrder","set","defaultFunction","createFunction","changed","getRenderMode"],"mappings":"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","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_LayerType_ from '../layertype.js';\nimport _ol_layer_Layer_ from '../layer/layer.js';\nimport _ol_layer_VectorRenderType_ from '../layer/vectorrendertype.js';\nimport _ol_obj_ from '../obj.js';\nimport _ol_style_Style_ from '../style/style.js';\n\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link ol.Object}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @constructor\n * @extends {ol.layer.Layer}\n * @fires ol.render.Event\n * @param {olx.layer.VectorOptions=} opt_options Options.\n * @api\n */\nvar _ol_layer_Vector_ = function(opt_options) {\n  var options = opt_options ?\n    opt_options : /** @type {olx.layer.VectorOptions} */ ({});\n\n  var baseOptions = _ol_obj_.assign({}, options);\n\n  delete baseOptions.style;\n  delete baseOptions.renderBuffer;\n  delete baseOptions.updateWhileAnimating;\n  delete baseOptions.updateWhileInteracting;\n  _ol_layer_Layer_.call(this, /** @type {olx.layer.LayerOptions} */ (baseOptions));\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.declutter_ = options.declutter !== undefined ? options.declutter : false;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.renderBuffer_ = options.renderBuffer !== undefined ?\n    options.renderBuffer : 100;\n\n  /**\n   * User provided style.\n   * @type {ol.style.Style|Array.<ol.style.Style>|ol.StyleFunction}\n   * @private\n   */\n  this.style_ = null;\n\n  /**\n   * Style function for use within the library.\n   * @type {ol.StyleFunction|undefined}\n   * @private\n   */\n  this.styleFunction_ = undefined;\n\n  this.setStyle(options.style);\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?\n    options.updateWhileAnimating : false;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?\n    options.updateWhileInteracting : false;\n\n  /**\n   * @private\n   * @type {ol.layer.VectorTileRenderType|string}\n   */\n  this.renderMode_ = options.renderMode || _ol_layer_VectorRenderType_.VECTOR;\n\n  /**\n   * The layer type.\n   * @protected\n   * @type {ol.LayerType}\n   */\n  this.type = _ol_LayerType_.VECTOR;\n\n};\n\n_ol_.inherits(_ol_layer_Vector_, _ol_layer_Layer_);\n\n\n/**\n * @return {boolean} Declutter.\n */\n_ol_layer_Vector_.prototype.getDeclutter = function() {\n  return this.declutter_;\n};\n\n\n/**\n * @param {boolean} declutter Declutter.\n */\n_ol_layer_Vector_.prototype.setDeclutter = function(declutter) {\n  this.declutter_ = declutter;\n};\n\n\n/**\n * @return {number|undefined} Render buffer.\n */\n_ol_layer_Vector_.prototype.getRenderBuffer = function() {\n  return this.renderBuffer_;\n};\n\n\n/**\n * @return {function(ol.Feature, ol.Feature): number|null|undefined} Render\n *     order.\n */\n_ol_layer_Vector_.prototype.getRenderOrder = function() {\n  return (\n  /** @type {ol.RenderOrderFunction|null|undefined} */ this.get(_ol_layer_Vector_.Property_.RENDER_ORDER)\n  );\n};\n\n\n/**\n * Return the associated {@link ol.source.Vector vectorsource} of the layer.\n * @function\n * @return {ol.source.Vector} Source.\n * @api\n */\n_ol_layer_Vector_.prototype.getSource;\n\n\n/**\n * Get the style for features.  This returns whatever was passed to the `style`\n * option at construction or to the `setStyle` method.\n * @return {ol.style.Style|Array.<ol.style.Style>|ol.StyleFunction}\n *     Layer style.\n * @api\n */\n_ol_layer_Vector_.prototype.getStyle = function() {\n  return this.style_;\n};\n\n\n/**\n * Get the style function.\n * @return {ol.StyleFunction|undefined} Layer style function.\n * @api\n */\n_ol_layer_Vector_.prototype.getStyleFunction = function() {\n  return this.styleFunction_;\n};\n\n\n/**\n * @return {boolean} Whether the rendered layer should be updated while\n *     animating.\n */\n_ol_layer_Vector_.prototype.getUpdateWhileAnimating = function() {\n  return this.updateWhileAnimating_;\n};\n\n\n/**\n * @return {boolean} Whether the rendered layer should be updated while\n *     interacting.\n */\n_ol_layer_Vector_.prototype.getUpdateWhileInteracting = function() {\n  return this.updateWhileInteracting_;\n};\n\n\n/**\n * @param {ol.RenderOrderFunction|null|undefined} renderOrder\n *     Render order.\n */\n_ol_layer_Vector_.prototype.setRenderOrder = function(renderOrder) {\n  this.set(_ol_layer_Vector_.Property_.RENDER_ORDER, renderOrder);\n};\n\n\n/**\n * Set the style for features.  This can be a single style object, an array\n * of styles, or a function that takes a feature and resolution and returns\n * an array of styles. If it is `undefined` the default style is used. If\n * it is `null` the layer has no style (a `null` style), so only features\n * that have their own styles will be rendered in the layer. See\n * {@link ol.style} for information on the default style.\n * @param {ol.style.Style|Array.<ol.style.Style>|ol.StyleFunction|null|undefined}\n *     style Layer style.\n * @api\n */\n_ol_layer_Vector_.prototype.setStyle = function(style) {\n  this.style_ = style !== undefined ? style : _ol_style_Style_.defaultFunction;\n  this.styleFunction_ = style === null ?\n    undefined : _ol_style_Style_.createFunction(this.style_);\n  this.changed();\n};\n\n\n/**\n * @return {ol.layer.VectorRenderType|string} The render mode.\n */\n_ol_layer_Vector_.prototype.getRenderMode = function() {\n  return this.renderMode_;\n};\n\n\n/**\n * @enum {string}\n * @private\n */\n_ol_layer_Vector_.Property_ = {\n  RENDER_ORDER: 'renderOrder'\n};\nexport default _ol_layer_Vector_;\n"]},"metadata":{},"sourceType":"module"}