{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_style_RegularShape_ from '../style/regularshape.js';\n/**\n * @classdesc\n * Set circle style for vector features.\n *\n * @constructor\n * @param {olx.style.CircleOptions=} opt_options Options.\n * @extends {ol.style.RegularShape}\n * @api\n */\n\nvar _ol_style_Circle_ = function (opt_options) {\n  var options = opt_options || {};\n\n  _ol_style_RegularShape_.call(this, {\n    points: Infinity,\n    fill: options.fill,\n    radius: options.radius,\n    snapToPixel: options.snapToPixel,\n    stroke: options.stroke,\n    atlasManager: options.atlasManager\n  });\n};\n\n_ol_.inherits(_ol_style_Circle_, _ol_style_RegularShape_);\n/**\n * Clones the style.  If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n * @return {ol.style.Circle} The cloned style.\n * @override\n * @api\n */\n\n\n_ol_style_Circle_.prototype.clone = function () {\n  var style = new _ol_style_Circle_({\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    radius: this.getRadius(),\n    snapToPixel: this.getSnapToPixel(),\n    atlasManager: this.atlasManager_\n  });\n  style.setOpacity(this.getOpacity());\n  style.setScale(this.getScale());\n  return style;\n};\n/**\n * Set the circle radius.\n *\n * @param {number} radius Circle radius.\n * @api\n */\n\n\n_ol_style_Circle_.prototype.setRadius = function (radius) {\n  this.radius_ = radius;\n  this.render_(this.atlasManager_);\n};\n\nexport default _ol_style_Circle_;","map":{"version":3,"sources":["/Users/jo/Dev/public/hackzurich-2020-map/map/node_modules/ol/style/circle.js"],"names":["_ol_","_ol_style_RegularShape_","_ol_style_Circle_","opt_options","options","call","points","Infinity","fill","radius","snapToPixel","stroke","atlasManager","inherits","prototype","clone","style","getFill","undefined","getStroke","getRadius","getSnapToPixel","atlasManager_","setOpacity","getOpacity","setScale","getScale","setRadius","radius_","render_"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,uBAAP,MAAoC,0BAApC;AAEA;;;;;;;;;;AASA,IAAIC,iBAAiB,GAAG,UAASC,WAAT,EAAsB;AAE5C,MAAIC,OAAO,GAAGD,WAAW,IAAI,EAA7B;;AAEAF,EAAAA,uBAAuB,CAACI,IAAxB,CAA6B,IAA7B,EAAmC;AACjCC,IAAAA,MAAM,EAAEC,QADyB;AAEjCC,IAAAA,IAAI,EAAEJ,OAAO,CAACI,IAFmB;AAGjCC,IAAAA,MAAM,EAAEL,OAAO,CAACK,MAHiB;AAIjCC,IAAAA,WAAW,EAAEN,OAAO,CAACM,WAJY;AAKjCC,IAAAA,MAAM,EAAEP,OAAO,CAACO,MALiB;AAMjCC,IAAAA,YAAY,EAAER,OAAO,CAACQ;AANW,GAAnC;AASD,CAbD;;AAeAZ,IAAI,CAACa,QAAL,CAAcX,iBAAd,EAAiCD,uBAAjC;AAGA;;;;;;;;AAMAC,iBAAiB,CAACY,SAAlB,CAA4BC,KAA5B,GAAoC,YAAW;AAC7C,MAAIC,KAAK,GAAG,IAAId,iBAAJ,CAAsB;AAChCM,IAAAA,IAAI,EAAE,KAAKS,OAAL,KAAiB,KAAKA,OAAL,GAAeF,KAAf,EAAjB,GAA0CG,SADhB;AAEhCP,IAAAA,MAAM,EAAE,KAAKQ,SAAL,KAAmB,KAAKA,SAAL,GAAiBJ,KAAjB,EAAnB,GAA8CG,SAFtB;AAGhCT,IAAAA,MAAM,EAAE,KAAKW,SAAL,EAHwB;AAIhCV,IAAAA,WAAW,EAAE,KAAKW,cAAL,EAJmB;AAKhCT,IAAAA,YAAY,EAAE,KAAKU;AALa,GAAtB,CAAZ;AAOAN,EAAAA,KAAK,CAACO,UAAN,CAAiB,KAAKC,UAAL,EAAjB;AACAR,EAAAA,KAAK,CAACS,QAAN,CAAe,KAAKC,QAAL,EAAf;AACA,SAAOV,KAAP;AACD,CAXD;AAcA;;;;;;;;AAMAd,iBAAiB,CAACY,SAAlB,CAA4Ba,SAA5B,GAAwC,UAASlB,MAAT,EAAiB;AACvD,OAAKmB,OAAL,GAAenB,MAAf;AACA,OAAKoB,OAAL,CAAa,KAAKP,aAAlB;AACD,CAHD;;AAIA,eAAepB,iBAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_style_RegularShape_ from '../style/regularshape.js';\n\n/**\n * @classdesc\n * Set circle style for vector features.\n *\n * @constructor\n * @param {olx.style.CircleOptions=} opt_options Options.\n * @extends {ol.style.RegularShape}\n * @api\n */\nvar _ol_style_Circle_ = function(opt_options) {\n\n  var options = opt_options || {};\n\n  _ol_style_RegularShape_.call(this, {\n    points: Infinity,\n    fill: options.fill,\n    radius: options.radius,\n    snapToPixel: options.snapToPixel,\n    stroke: options.stroke,\n    atlasManager: options.atlasManager\n  });\n\n};\n\n_ol_.inherits(_ol_style_Circle_, _ol_style_RegularShape_);\n\n\n/**\n * Clones the style.  If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n * @return {ol.style.Circle} The cloned style.\n * @override\n * @api\n */\n_ol_style_Circle_.prototype.clone = function() {\n  var style = new _ol_style_Circle_({\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    radius: this.getRadius(),\n    snapToPixel: this.getSnapToPixel(),\n    atlasManager: this.atlasManager_\n  });\n  style.setOpacity(this.getOpacity());\n  style.setScale(this.getScale());\n  return style;\n};\n\n\n/**\n * Set the circle radius.\n *\n * @param {number} radius Circle radius.\n * @api\n */\n_ol_style_Circle_.prototype.setRadius = function(radius) {\n  this.radius_ = radius;\n  this.render_(this.atlasManager_);\n};\nexport default _ol_style_Circle_;\n"]},"metadata":{},"sourceType":"module"}