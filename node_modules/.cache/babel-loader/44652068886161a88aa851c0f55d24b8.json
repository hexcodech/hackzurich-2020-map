{"ast":null,"code":"/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link ol.style.Icon}, {@link ol.style.Circle} and\n * {@link ol.style.RegularShape}.\n *\n * @constructor\n * @abstract\n * @param {ol.StyleImageOptions} options Options.\n * @api\n */\nvar _ol_style_Image_ = function (options) {\n  /**\n   * @private\n   * @type {number}\n   */\n  this.opacity_ = options.opacity;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.rotateWithView_ = options.rotateWithView;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.rotation_ = options.rotation;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this.scale_ = options.scale;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this.snapToPixel_ = options.snapToPixel;\n};\n/**\n * Get the symbolizer opacity.\n * @return {number} Opacity.\n * @api\n */\n\n\n_ol_style_Image_.prototype.getOpacity = function () {\n  return this.opacity_;\n};\n/**\n * Determine whether the symbolizer rotates with the map.\n * @return {boolean} Rotate with map.\n * @api\n */\n\n\n_ol_style_Image_.prototype.getRotateWithView = function () {\n  return this.rotateWithView_;\n};\n/**\n * Get the symoblizer rotation.\n * @return {number} Rotation.\n * @api\n */\n\n\n_ol_style_Image_.prototype.getRotation = function () {\n  return this.rotation_;\n};\n/**\n * Get the symbolizer scale.\n * @return {number} Scale.\n * @api\n */\n\n\n_ol_style_Image_.prototype.getScale = function () {\n  return this.scale_;\n};\n/**\n * Determine whether the symbolizer should be snapped to a pixel.\n * @return {boolean} The symbolizer should snap to a pixel.\n * @api\n */\n\n\n_ol_style_Image_.prototype.getSnapToPixel = function () {\n  return this.snapToPixel_;\n};\n/**\n * Get the anchor point in pixels. The anchor determines the center point for the\n * symbolizer.\n * @abstract\n * @return {Array.<number>} Anchor.\n */\n\n\n_ol_style_Image_.prototype.getAnchor = function () {};\n/**\n * Get the image element for the symbolizer.\n * @abstract\n * @param {number} pixelRatio Pixel ratio.\n * @return {HTMLCanvasElement|HTMLVideoElement|Image} Image element.\n */\n\n\n_ol_style_Image_.prototype.getImage = function (pixelRatio) {};\n/**\n * @abstract\n * @param {number} pixelRatio Pixel ratio.\n * @return {HTMLCanvasElement|HTMLVideoElement|Image} Image element.\n */\n\n\n_ol_style_Image_.prototype.getHitDetectionImage = function (pixelRatio) {};\n/**\n * @abstract\n * @return {ol.ImageState} Image state.\n */\n\n\n_ol_style_Image_.prototype.getImageState = function () {};\n/**\n * @abstract\n * @return {ol.Size} Image size.\n */\n\n\n_ol_style_Image_.prototype.getImageSize = function () {};\n/**\n * @abstract\n * @return {ol.Size} Size of the hit-detection image.\n */\n\n\n_ol_style_Image_.prototype.getHitDetectionImageSize = function () {};\n/**\n * Get the origin of the symbolizer.\n * @abstract\n * @return {Array.<number>} Origin.\n */\n\n\n_ol_style_Image_.prototype.getOrigin = function () {};\n/**\n * Get the size of the symbolizer (in pixels).\n * @abstract\n * @return {ol.Size} Size.\n */\n\n\n_ol_style_Image_.prototype.getSize = function () {};\n/**\n * Set the opacity.\n *\n * @param {number} opacity Opacity.\n * @api\n */\n\n\n_ol_style_Image_.prototype.setOpacity = function (opacity) {\n  this.opacity_ = opacity;\n};\n/**\n * Set whether to rotate the style with the view.\n *\n * @param {boolean} rotateWithView Rotate with map.\n */\n\n\n_ol_style_Image_.prototype.setRotateWithView = function (rotateWithView) {\n  this.rotateWithView_ = rotateWithView;\n};\n/**\n * Set the rotation.\n *\n * @param {number} rotation Rotation.\n * @api\n */\n\n\n_ol_style_Image_.prototype.setRotation = function (rotation) {\n  this.rotation_ = rotation;\n};\n/**\n * Set the scale.\n *\n * @param {number} scale Scale.\n * @api\n */\n\n\n_ol_style_Image_.prototype.setScale = function (scale) {\n  this.scale_ = scale;\n};\n/**\n * Set whether to snap the image to the closest pixel.\n *\n * @param {boolean} snapToPixel Snap to pixel?\n */\n\n\n_ol_style_Image_.prototype.setSnapToPixel = function (snapToPixel) {\n  this.snapToPixel_ = snapToPixel;\n};\n/**\n * @abstract\n * @param {function(this: T, ol.events.Event)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @return {ol.EventsKey|undefined} Listener key.\n * @template T\n */\n\n\n_ol_style_Image_.prototype.listenImageChange = function (listener, thisArg) {};\n/**\n * Load not yet loaded URI.\n * @abstract\n */\n\n\n_ol_style_Image_.prototype.load = function () {};\n/**\n * @abstract\n * @param {function(this: T, ol.events.Event)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @template T\n */\n\n\n_ol_style_Image_.prototype.unlistenImageChange = function (listener, thisArg) {};\n\nexport default _ol_style_Image_;","map":{"version":3,"sources":["/Users/jo/Dev/public/hackzurich-2020-map/map/node_modules/ol/style/image.js"],"names":["_ol_style_Image_","options","opacity_","opacity","rotateWithView_","rotateWithView","rotation_","rotation","scale_","scale","snapToPixel_","snapToPixel","prototype","getOpacity","getRotateWithView","getRotation","getScale","getSnapToPixel","getAnchor","getImage","pixelRatio","getHitDetectionImage","getImageState","getImageSize","getHitDetectionImageSize","getOrigin","getSize","setOpacity","setRotateWithView","setRotation","setScale","setSnapToPixel","listenImageChange","listener","thisArg","load","unlistenImageChange"],"mappings":"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","sourcesContent":["/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link ol.style.Icon}, {@link ol.style.Circle} and\n * {@link ol.style.RegularShape}.\n *\n * @constructor\n * @abstract\n * @param {ol.StyleImageOptions} options Options.\n * @api\n */\nvar _ol_style_Image_ = function(options) {\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.opacity_ = options.opacity;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.rotateWithView_ = options.rotateWithView;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.rotation_ = options.rotation;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.scale_ = options.scale;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.snapToPixel_ = options.snapToPixel;\n\n};\n\n\n/**\n * Get the symbolizer opacity.\n * @return {number} Opacity.\n * @api\n */\n_ol_style_Image_.prototype.getOpacity = function() {\n  return this.opacity_;\n};\n\n\n/**\n * Determine whether the symbolizer rotates with the map.\n * @return {boolean} Rotate with map.\n * @api\n */\n_ol_style_Image_.prototype.getRotateWithView = function() {\n  return this.rotateWithView_;\n};\n\n\n/**\n * Get the symoblizer rotation.\n * @return {number} Rotation.\n * @api\n */\n_ol_style_Image_.prototype.getRotation = function() {\n  return this.rotation_;\n};\n\n\n/**\n * Get the symbolizer scale.\n * @return {number} Scale.\n * @api\n */\n_ol_style_Image_.prototype.getScale = function() {\n  return this.scale_;\n};\n\n\n/**\n * Determine whether the symbolizer should be snapped to a pixel.\n * @return {boolean} The symbolizer should snap to a pixel.\n * @api\n */\n_ol_style_Image_.prototype.getSnapToPixel = function() {\n  return this.snapToPixel_;\n};\n\n\n/**\n * Get the anchor point in pixels. The anchor determines the center point for the\n * symbolizer.\n * @abstract\n * @return {Array.<number>} Anchor.\n */\n_ol_style_Image_.prototype.getAnchor = function() {};\n\n\n/**\n * Get the image element for the symbolizer.\n * @abstract\n * @param {number} pixelRatio Pixel ratio.\n * @return {HTMLCanvasElement|HTMLVideoElement|Image} Image element.\n */\n_ol_style_Image_.prototype.getImage = function(pixelRatio) {};\n\n\n/**\n * @abstract\n * @param {number} pixelRatio Pixel ratio.\n * @return {HTMLCanvasElement|HTMLVideoElement|Image} Image element.\n */\n_ol_style_Image_.prototype.getHitDetectionImage = function(pixelRatio) {};\n\n\n/**\n * @abstract\n * @return {ol.ImageState} Image state.\n */\n_ol_style_Image_.prototype.getImageState = function() {};\n\n\n/**\n * @abstract\n * @return {ol.Size} Image size.\n */\n_ol_style_Image_.prototype.getImageSize = function() {};\n\n\n/**\n * @abstract\n * @return {ol.Size} Size of the hit-detection image.\n */\n_ol_style_Image_.prototype.getHitDetectionImageSize = function() {};\n\n\n/**\n * Get the origin of the symbolizer.\n * @abstract\n * @return {Array.<number>} Origin.\n */\n_ol_style_Image_.prototype.getOrigin = function() {};\n\n\n/**\n * Get the size of the symbolizer (in pixels).\n * @abstract\n * @return {ol.Size} Size.\n */\n_ol_style_Image_.prototype.getSize = function() {};\n\n\n/**\n * Set the opacity.\n *\n * @param {number} opacity Opacity.\n * @api\n */\n_ol_style_Image_.prototype.setOpacity = function(opacity) {\n  this.opacity_ = opacity;\n};\n\n\n/**\n * Set whether to rotate the style with the view.\n *\n * @param {boolean} rotateWithView Rotate with map.\n */\n_ol_style_Image_.prototype.setRotateWithView = function(rotateWithView) {\n  this.rotateWithView_ = rotateWithView;\n};\n\n\n/**\n * Set the rotation.\n *\n * @param {number} rotation Rotation.\n * @api\n */\n_ol_style_Image_.prototype.setRotation = function(rotation) {\n  this.rotation_ = rotation;\n};\n\n\n/**\n * Set the scale.\n *\n * @param {number} scale Scale.\n * @api\n */\n_ol_style_Image_.prototype.setScale = function(scale) {\n  this.scale_ = scale;\n};\n\n\n/**\n * Set whether to snap the image to the closest pixel.\n *\n * @param {boolean} snapToPixel Snap to pixel?\n */\n_ol_style_Image_.prototype.setSnapToPixel = function(snapToPixel) {\n  this.snapToPixel_ = snapToPixel;\n};\n\n\n/**\n * @abstract\n * @param {function(this: T, ol.events.Event)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @return {ol.EventsKey|undefined} Listener key.\n * @template T\n */\n_ol_style_Image_.prototype.listenImageChange = function(listener, thisArg) {};\n\n\n/**\n * Load not yet loaded URI.\n * @abstract\n */\n_ol_style_Image_.prototype.load = function() {};\n\n\n/**\n * @abstract\n * @param {function(this: T, ol.events.Event)} listener Listener function.\n * @param {T} thisArg Value to use as `this` when executing `listener`.\n * @template T\n */\n_ol_style_Image_.prototype.unlistenImageChange = function(listener, thisArg) {};\nexport default _ol_style_Image_;\n"]},"metadata":{},"sourceType":"module"}