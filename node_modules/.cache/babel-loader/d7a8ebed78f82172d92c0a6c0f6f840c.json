{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_color_ from '../color.js';\n/**\n * @classdesc\n * Set fill style for vector features.\n *\n * @constructor\n * @param {olx.style.FillOptions=} opt_options Options.\n * @api\n */\n\nvar _ol_style_Fill_ = function (opt_options) {\n  var options = opt_options || {};\n  /**\n   * @private\n   * @type {ol.Color|ol.ColorLike}\n   */\n\n  this.color_ = options.color !== undefined ? options.color : null;\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n\n  this.checksum_ = undefined;\n};\n/**\n * Clones the style. The color is not cloned if it is an {@link ol.ColorLike}.\n * @return {ol.style.Fill} The cloned style.\n * @api\n */\n\n\n_ol_style_Fill_.prototype.clone = function () {\n  var color = this.getColor();\n  return new _ol_style_Fill_({\n    color: color && color.slice ? color.slice() : color || undefined\n  });\n};\n/**\n * Get the fill color.\n * @return {ol.Color|ol.ColorLike} Color.\n * @api\n */\n\n\n_ol_style_Fill_.prototype.getColor = function () {\n  return this.color_;\n};\n/**\n * Set the color.\n *\n * @param {ol.Color|ol.ColorLike} color Color.\n * @api\n */\n\n\n_ol_style_Fill_.prototype.setColor = function (color) {\n  this.color_ = color;\n  this.checksum_ = undefined;\n};\n/**\n * @return {string} The checksum.\n */\n\n\n_ol_style_Fill_.prototype.getChecksum = function () {\n  if (this.checksum_ === undefined) {\n    if (this.color_ instanceof CanvasPattern || this.color_ instanceof CanvasGradient) {\n      this.checksum_ = _ol_.getUid(this.color_).toString();\n    } else {\n      this.checksum_ = 'f' + (this.color_ ? _ol_color_.asString(this.color_) : '-');\n    }\n  }\n\n  return this.checksum_;\n};\n\nexport default _ol_style_Fill_;","map":{"version":3,"sources":["/Users/jo/Dev/public/hackzurich-2020-map/map/node_modules/ol/style/fill.js"],"names":["_ol_","_ol_color_","_ol_style_Fill_","opt_options","options","color_","color","undefined","checksum_","prototype","clone","getColor","slice","setColor","getChecksum","CanvasPattern","CanvasGradient","getUid","toString","asString"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA;;;;;;;;;AAQA,IAAIC,eAAe,GAAG,UAASC,WAAT,EAAsB;AAE1C,MAAIC,OAAO,GAAGD,WAAW,IAAI,EAA7B;AAEA;;;;;AAIA,OAAKE,MAAL,GAAcD,OAAO,CAACE,KAAR,KAAkBC,SAAlB,GAA8BH,OAAO,CAACE,KAAtC,GAA8C,IAA5D;AAEA;;;;;AAIA,OAAKE,SAAL,GAAiBD,SAAjB;AACD,CAfD;AAkBA;;;;;;;AAKAL,eAAe,CAACO,SAAhB,CAA0BC,KAA1B,GAAkC,YAAW;AAC3C,MAAIJ,KAAK,GAAG,KAAKK,QAAL,EAAZ;AACA,SAAO,IAAIT,eAAJ,CAAoB;AACzBI,IAAAA,KAAK,EAAGA,KAAK,IAAIA,KAAK,CAACM,KAAhB,GAAyBN,KAAK,CAACM,KAAN,EAAzB,GAAyCN,KAAK,IAAIC;AADhC,GAApB,CAAP;AAGD,CALD;AAQA;;;;;;;AAKAL,eAAe,CAACO,SAAhB,CAA0BE,QAA1B,GAAqC,YAAW;AAC9C,SAAO,KAAKN,MAAZ;AACD,CAFD;AAKA;;;;;;;;AAMAH,eAAe,CAACO,SAAhB,CAA0BI,QAA1B,GAAqC,UAASP,KAAT,EAAgB;AACnD,OAAKD,MAAL,GAAcC,KAAd;AACA,OAAKE,SAAL,GAAiBD,SAAjB;AACD,CAHD;AAMA;;;;;AAGAL,eAAe,CAACO,SAAhB,CAA0BK,WAA1B,GAAwC,YAAW;AACjD,MAAI,KAAKN,SAAL,KAAmBD,SAAvB,EAAkC;AAChC,QACE,KAAKF,MAAL,YAAuBU,aAAvB,IACE,KAAKV,MAAL,YAAuBW,cAF3B,EAGE;AACA,WAAKR,SAAL,GAAiBR,IAAI,CAACiB,MAAL,CAAY,KAAKZ,MAAjB,EAAyBa,QAAzB,EAAjB;AACD,KALD,MAKO;AACL,WAAKV,SAAL,GAAiB,OAAO,KAAKH,MAAL,GACtBJ,UAAU,CAACkB,QAAX,CAAoB,KAAKd,MAAzB,CADsB,GACa,GADpB,CAAjB;AAED;AACF;;AAED,SAAO,KAAKG,SAAZ;AACD,CAdD;;AAeA,eAAeN,eAAf","sourcesContent":["import _ol_ from '../index.js';\nimport _ol_color_ from '../color.js';\n\n/**\n * @classdesc\n * Set fill style for vector features.\n *\n * @constructor\n * @param {olx.style.FillOptions=} opt_options Options.\n * @api\n */\nvar _ol_style_Fill_ = function(opt_options) {\n\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {ol.Color|ol.ColorLike}\n   */\n  this.color_ = options.color !== undefined ? options.color : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.checksum_ = undefined;\n};\n\n\n/**\n * Clones the style. The color is not cloned if it is an {@link ol.ColorLike}.\n * @return {ol.style.Fill} The cloned style.\n * @api\n */\n_ol_style_Fill_.prototype.clone = function() {\n  var color = this.getColor();\n  return new _ol_style_Fill_({\n    color: (color && color.slice) ? color.slice() : color || undefined\n  });\n};\n\n\n/**\n * Get the fill color.\n * @return {ol.Color|ol.ColorLike} Color.\n * @api\n */\n_ol_style_Fill_.prototype.getColor = function() {\n  return this.color_;\n};\n\n\n/**\n * Set the color.\n *\n * @param {ol.Color|ol.ColorLike} color Color.\n * @api\n */\n_ol_style_Fill_.prototype.setColor = function(color) {\n  this.color_ = color;\n  this.checksum_ = undefined;\n};\n\n\n/**\n * @return {string} The checksum.\n */\n_ol_style_Fill_.prototype.getChecksum = function() {\n  if (this.checksum_ === undefined) {\n    if (\n      this.color_ instanceof CanvasPattern ||\n        this.color_ instanceof CanvasGradient\n    ) {\n      this.checksum_ = _ol_.getUid(this.color_).toString();\n    } else {\n      this.checksum_ = 'f' + (this.color_ ?\n        _ol_color_.asString(this.color_) : '-');\n    }\n  }\n\n  return this.checksum_;\n};\nexport default _ol_style_Fill_;\n"]},"metadata":{},"sourceType":"module"}